#!/bin/bash

# Define variables
progname=$(basename $0)

if [ "$USER" = "" ]
then
    USER=$(whoami)
fi

DATABASE='FinanceQuant'
VERSION='0.1'
#DBSYSTEM='PostgreSQL'
DBSYSTEM='MySQL'
SCHEMA_ONLY=0
DAYOFWEEK=$(date +"%u")
LSB=""


if [ "$DAYOFWEEK" -gt 5 ] || [ "$DAYOFWEEK" -eq 1 ]
then
    LASTBIZDAY="last friday"
else
    LASTBIZDAY="yesterday"
fi



#PATH="/usr/bin:/bin:/usr/sbin:/sbin"

INSTALL_DIR="/home/"$USER"/data-hub"




VERSION='0.01'
NAME="data-hub"
DROP=$HOME"/"$NAME"/data"
LOG=$DROP"/"$NAME".log"

TOOLS_WNT="micro-wordnet"
TOOLS_CLI="micro-structure"
TOOLS_DIC="micro-dict"
TOOLS_STM="micro-steemer"
TOOLS_REN="micro-rename"
TOOLS_WST="micro-wnwikilist"

WEBSOCKET_SERVER="micro-sock"

CONFIG="$HOME/.micro"
DRIVER="$HOME/$NAME/data/driver.txt"

[ ! -d $DROP ] && mkdir -p $DROP;
[ ! -f $LOG ] && echo $progname" "$USER" "$LOG" " > $LOG;


[ ! -f $WEBSOCKET_SERVER ] && \
echo $progname" "$USER" "$WEBSOCKET_SERVER" " >> $LOG;









function format(){

    local message="$@"
    [ -z $message ] && message=" "
    read -p "$message" readEnterKey



}


function nl(){

    local message="$@"
    [ -z $message ] && message=" "
    read -p "$message" readEnterKey
    format


}


# Purpose: Display pause prompt
# $1-> Message (optional)

function pause(){

    local message="$@"
    [ -z $message ] && message="Press [Enter] key to continue..."
    read -p "$message" readEnterKey

}



# Purpose  - Display a menu on screen
function run_test(){


    write_header " Testing "
    micro=$(micro any 1)
    write_header $micro
    show_menu $@
    read_input $@
    pause

}



# Purpose  - Display a menu on screen
function run_xtest(){


sqldate=$(perl <<'EOF'

sub sqlDate {

  my $in     = shift;
  my @dateBits = ();
  my $out      = "";

  if(defined $in and $in =~/-/) {
      @dateBits = split("-",$in);
      $out = sprintf("%s/%s/%s",$dateBits[1],$dateBits[2],$dateBits[0]);
  }elsif(defined $in and $in =~ /\//){
      @dateBits = split("/",$in);
      $out = sprintf("%s%s-%s-%s",$dateBits[2] gt 1000 ? "":"20",$dateBits[2],$dateBits[1],$dateBits[0]);
  }
  return $out;
}
print sqlDate($ENV{"sequencerMaxDate"});


EOF

)



}



# Purpose  - Display a menu on screen
function evaluate_data(){
    date
    write_header " Evaluate "

    pause

}


# Purpose - Network inferface and routing info
function market_overview(){

    write_header " Market overview"


    nl

    pause

}


# Purpose - Network inferface and routing info
function start_tray(){

    write_header " Starting Tray"


    nl

    pause

}


function start_report_server(){

    write_header " Starting.. WEBSOCKET_SERVER "


    nl

    pause
}


function read_input(){
    local c
    read -p "Enter your choice [ 0 - 19 ] " c
    case $c in
    0)  echo "Bye!"; exit 0 ;;
    1)  os_info ;;
    2)  host_info ;;
    3)  net_info ;;
    4)  user_info "who" ;;
    5)  user_info "last" ;;
    6)  mem_info ;;
    7)  micro-cachex;;
    8)  run_test ;;
    9)  perl $WEBSOCKET_SERVER & ;;
    10) micro ;;
    11) micro ;;
    12) micro ;;
    13) micro ;;
    14) micro ;;
    15) micro ;;
    16) micro ;;
    17) echo 1 ;;
    18) echo 1 ;;
    19) format ;;
    *)
    echo "Please select between 0 to 19 choice only."
    pause
    esac
}



function start_r_cmd(){

    write_header " Starting.. FINANCE_QUANT_R_CMD "


    nl

    pause
}




# Purpose - Network inferface and routing info
function start_gtk_search(){

    write_header usage


    nl

    pause
}


# Purpose  - Display a menu on screen
function show_menu(){


    echo "0. for exiting the programm"
    echo "---------------------------"
    echo "   Host Menu"
    echo "---------------------------"
    echo "1. Operating system info"
    echo "2. Hostname and dns info"
    echo "3. Network info"
    echo "4. Who is online"
    echo "5. Last logged in users"
    echo "6. Free and used memory info"
    echo "---------------------------"
    echo "   Main Menu"
    echo "---------------------------"
    echo "7. Create Db"
    echo "8. Scann IBES for strong buy"
    echo "9. Start report server"
    echo "10. Start structure cli"
    echo "11. Market Overview"
    echo "12. Start R back-test"
    echo "13. Start Tray"
    echo "14. Restore previous run from master-run Storable"
    echo "15. XML EXPORT"
    echo "16. View Knowledge on the system "
    echo "17. View Trades"
    echo "18. Manage Category's"
    echo "19. Custom Module"

}

# Purpose - Display header message
# $1 - message
function write_header(){
    local h="$@"


cat <<'EOF'
             i!~!!))!!!!!!!!!!!!!!!!!!!!!!!!
          i!!!{!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!i
       i!!)!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    '!h!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  '!!`!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!i
   /!!!~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
' ':)!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  ~:!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
..!!!!!\!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 `!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 ~ ~!!!)!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!~
~~'~{!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!:'~
{-{)!!{!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!:!
`!!!!{!~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!':!!!
' {!!!{>)`!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!)!~..
:!{!!!{!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! -!!:
    ~:!4~/!!!!!!!!!!!!!!!!!!!~!!!!!!!!!!!!!!!!!!!!!!!!!!
     :~!!~)(!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
      ``~!!).~!!!!!!!!!!!!!{!!!!!!!!!!!!!!!!!!!!!!!!!!!!!:
            ~  '!\!!!!!!!!!!(!!!!!!!!!!!!!!!!!!!!!!4!!!~:
           '      '--`!!!!!!!!/:\!!{!!((!~.~!!`?~-      :
              ``-.    `~!{!`)(>~/ \~                   :
   .                \  : `{{`. {-   .-~`              /
    .          !:       .\\?.{\   :`      .          :!
    \ :         `      -~!{:!!!\ ~     :!`         .>!
    '  ~          '    '{!!!{!!!t                 ! !!
     '!  !.            {!!!!!!!!!              .~ {~!
      ~!!..`~:.       {!!!!!!!!!!:          .{~ :LS{
       `!!!!!!h:!?!!!!!!!!!!!!!(!!!!::..-~~` {!!!!.
         4!!!!!!!!!!!!!!!!!!!!!~!{!~!!!!!!!!!!!!'
          `!!!!!!!!!!!!!!!!!!!!(~!!!!!!!!!!!!!~
            `!!!!!!!!!!!{\``!!``(!!!!!!!!!~~  .
             `!!!!!!!!!!!!!!!!!!!!!!!!(!:
               .!!!!!!!!!!!!!!!!!!!!!\~
               .`!!!!!!!/`.;;~;;`~!! '
                 -~!!!!!!!!!!!!!(!!/ .
                    `!!!!!!!!!!!!!!'
                      `\!!!!!!!!!~


EOF

    echo "---------------------------------------------------------------"
    echo "     ${h}"
    echo "---------------------------------------------------------------"
}

# Purpose - Get info about your operating system
function os_info(){
    write_header " System information "
    echo "Operating system : $(uname)"
    [ -x $LSB ] && $LSB -a || echo "$LSB command is not insalled (set \$LSB variable)"
    #pause "Press [Enter] key to continue..."
    pause
}

# Purpose - Get info about host such as dns, IP, and hostname
function host_info(){
    local dnsips=$(sed -e '/^$/d' /etc/resolv.conf | awk '{if (tolower($1)=="nameserver") print $2}')
    write_header " Hostname and DNS information "
    echo "Hostname : $(hostname -s)"
    echo "DNS domain : $(hostname -d)"
    echo "Fully qualified domain name : $(hostname -f)"
    echo "Network address (IP) :  $(hostname -i)"
    echo "DNS name servers (DNS IP) : ${dnsips}"
    pause
}

# Purpose - Network inferface and routing info
function net_info(){
    devices=$(netstat -i | cut -d" " -f1 | egrep -v "^Kernel|Iface|lo")
    write_header " Network information "
    echo "Total network interfaces found : $(wc -w <<<${devices})"

    echo "*** IP Addresses Information ***"
    ip -4 address show

    echo "***********************"
    echo "*** Network routing ***"
    echo "***********************"
    netstat -nr

    echo "**************************************"
    echo "*** Interface traffic information ***"
    echo "**************************************"
    netstat -i

    pause
}

# Purpose - Display a list of users currently logged on
#           display a list of receltly loggged in users
function user_info(){
    local cmd="$1"
    case "$cmd" in
    who) write_header " Who is online "; who -H; pause ;;
    last) write_header " List of last logged in users "; last ; pause ;;
    esac
}

# Purpose - Display used and free memory info
function mem_info(){
    write_header " Free and used memory "
    free -m

    echo "*********************************"
    echo "*** Virtual memory statistics ***"
    echo "*********************************"
    vmstat
    echo "***********************************"
    echo "*** Top 5 memory eating process ***"
    echo "***********************************"
    ps auxf | sort -nr -k 4 | head -5
    pause
}

# --------------------------- shell functions below --------------------------
function usage_and_exit
{
    cat<<EOF
Created (and fill) micro-structure's
EOF
    exit 0
}

function execute
{
    echo -n "** Running:     "
    echo "$1"
    eval "$1"
    echo
}



_temp="/tmp/answer.$$"
PN=`basename "$0"`
VER='0.01'
dialog 2>$_temp
DVER=`cat $_temp | head -1`

### gauge demo ###
gauge() {
    { for I in $(seq 1 100) ; do
        echo $I
        sleep 0.01
      done
    echo 100; } | dialog --backtitle "active-memory - Progress" \
                         --gauge "Progress" 6 60 0



}

### File or Directory selection menu with dialog
file_menu() {
    fileroot=$DROP
    IFS_BAK=$IFS
    IFS=$'\n' # wegen Filenamen mit Blanks
    array=( $(ls $fileroot) )
    n=0
    for item in ${array[@]}
    do
        menuitems="$menuitems $n ${item// /_}" # subst. Blanks with "_"
        let n+=1
    done
    IFS=$IFS_BAK
    dialog --backtitle "Variable items" \
           --title "Select a file" --menu \
           "Choose one of the menu points" 16 40 8 $menuitems 2> $_temp
    if [ $? -eq 0 ]; then
        item=`cat $_temp`
        selection=${array[$(cat $_temp)]}
        dialog --msgbox "You choose:\nNo. $item --> $selection" 6 42
    fi
}
### File or Directory selection menu with dialog
word_menu() {

 IFS=$'\n'

 dialog --backtitle "active-memory - InputBox"\
           --inputbox "Enter a line, please" 18 152 2>$_temp;

    x=$(cat $_temp);

words=`wn $x -grepv -grepn -grepa | tr "\n" "="`;

    fileroot=$DROP
    IFS_BAK=$IFS
    array=( $(ls $fileroot) )
    n=0
    for item in ${array[@]}
    do
        menuitems="$menuitems $n ${item// /_}" # subst. Blanks with "_"
        let n+=1
    done
    IFS=$IFS_BAK
    dialog --backtitle "active-memory - menu with variable items" \
           --title "Select a file" --menu \
           "Choose one of the menu points" 16 40 8 $menuitems 2> $_temp
    if [ $? -eq 0 ]; then
        item=`cat $_temp`
        selection=${array[$(cat $_temp)]}
        dialog --msgbox "You choose:\nNo. $selection" 6 42

    fi
}

### File Select
file_select() {
    dialog --backtitle "active-memory - fselect"\
           --begin 3 10 --title " use [blank] key to select "\
           --fselect "$HOME/" 10 60 2>$_temp

    result=`cat $_temp`
    dialog --msgbox "\nYou selected:\n$result" 9 52
}

### create Today's calendar ###
calendar() {
    today=date +"%d %m %Y"
    echo "heute=$today"
    dialog --backtitle "active-memory - Calendar" \
           --calendar "choose a date" 2 1 $today 2>$_temp
    datum=`cat $_temp`
    dialog --title " Date selected " --msgbox "\nYour date: $datum" 6 30
}






checklist() {



FS=$'\n'

 dialog --backtitle "active-memory - InputBox"\
           --inputbox "Enter a line, please" 18 152 2>$_temp
    x=$(cat $_temp);

    words=$(wn $x -grepv -grepn -grepa )
   # number the lines


SPLITTED=$( echo $words | sed 's/ /\n/g' | awk -- '{print NR, $0, 0 }' )



#   SPLITTED=$( echo   $words | sed 's/ /_/g' | sed 's/=/\n/' | awk -- "NR==$X {print \$0 }"  )

# prompt via dialog (output-fd=1 is so that dialog gui doesn't go to subshell)
OUT=$(dialog --output-fd 1 --ok-label Select --separate-output --checklist Choose 0 50 22 $SPLITTED)



# loop through selected numbers
for X in $OUT ; do
    # inefficiently print out the text corresponding to the selections
    CHOSEN=$( echo $words | sed 's/ /\n/g' | awk -- "NR==$X {print \$0 }" )

dialog --backtitle "active-memory - MessageBox" \
   --msgbox "$CHOSEN\n$DVER" 9 52

done;
}






driverlist() {

# dialog --backtitle "active-memory - InputBox"\
 #          --inputbox "Enter a line, please" 18 152 2>$_temp
 words="couchDB memcached berkeleysDB file"
for X in $words ; do
  echo $X;
done
   x=$(cat $_temp);


   words=`cat  $HOME/active-memory/test/wordlist.out | grep $x`

   # number the lines
SPLITTED=$( echo $words | sed 's/ /\n/g' | awk -- '{print NR, $0, 0 }' )

# prompt via dialog (output-fd=1 is so that dialog gui doesn't go to subshell)
OUT=$(dialog --output-fd 1 --ok-label Select --separate-output --checklist Choose 0 50 22 $SPLITTED)


# loop through selected numbers
for X in $OUT ; do
    # inefficiently print out the text corresponding to the selections
    CHOSEN=$( echo $words | sed 's/ /\n/g' | awk -- "NR==$X {print \$0 }" )

dialog --backtitle "active-memory - MessageBox" \
   --msgbox "$CHOSEN\n$DVER" 9 52



done;
}

### Radio List - single select ###
radiolist() {
    dialog --backtitle "active-memory - RadioList (single select)" \
           --radiolist "tag item to choose" 15 50 8 \
           01 "first item to select" off\
           02 "second item - on by default" on\
           03 "third item" off\
           04 "more items ..." off 2>$_temp
    result=`cat $_temp`
    dialog --title " Item(s) selected " --msgbox "\nYou choose item: $result" 6 44
}



   #dialog --backtitle "active-memory - InputBox"\
 #          --inputbox "Enter a line, please" 18 152 2>$_temp
  #  words=`x=$(cat $_temp); cat "/home/"$USER"/myperl/test/wordlist.out | grep $x`
#    result=`echo -n $words | tr "\t" "\n"`


### Input Box
inputbox() {
IFS=$'\n';


    dialog --backtitle "active-memory - InputBox"\
           --inputbox "Enter a line, please" 8 52 2>$_temp

     x=$(cat $_temp);

     words=`cat  $HOME/data-hub/book/output-unique | grep $x`
    result=`echo -n $words | tr "\t" "\n"`

     dialog --msgbox "\nYou entered:\n$result" 19 152
}

### Message Box - show versions
version() {
    dialog --backtitle "active-memory - MessageBox" \
           --msgbox "$PN - Version $VER\na active-memory component\n\nsantex@cpan.org:\n$DVER" 9 52
}

### Text Box - show file test.txt
textbox() {
    filename="$HOME/.micro"
    if [ -e $filename ]; then
        dialog --backtitle "active-memory - TextBox - use [up] [down] to scroll"\
               --begin 3 5 --title " viewing File: $filename "\
               --textbox $filename 20 70
    else
        dialog --msgbox "*** ERROR ***\n$filename does not exist" 6 42
    fi
}

### Form ###
formbox () {
    dialog --backtitle "...." \
        --form " Form Test - use [up] [down] to select input field " 21 70 18 \
        "name" 2 4 "" 2 15 20 0\
        "surname" 4 4 "" 4 15 20 0\
        "city" 6 4 "" 6 15 20 0\
        "county" 8 4 "Germany" 8 15 "-20" 0\
        2>$_temp

    if [ ${?} -ne 0 ]; then return; fi
    result=`cat $_temp`
    echo "Result=$result"
    dialog --title "Items are separated by \\n" --cr-wrap \
           --msgbox "\nYou entered:\n$result" 12 52
}

### Text Box - show file test.txt
tailbox() {


    dialog clear
    test

    dialog --backtitle "active-memory - v 0.01"\
           --begin 3 5 --title " viewing File: "$LOG" "\
           --tailbox $LOG 18 70
}

### create main menu using dialog
main_menu() {


    dialog --backtitle "active-memory - AI microstructure's "$stop --title "- V. $VER "\
    --cancel-label "Quit" \
    --menu "Move using [UP] [DOWN], [Enter] to select" 37 60 30\
    Micro "Search Knowledge"\
    Config "Change primary configuration!"\
    Multi "Multi select list"\
    Driver "Multi select list"\
    Input "Show Box for typing a line"\
    Gauge "Progress bar"\
    Radio "Single select list"\
    File "Show Dirctory & File selector"\
    Form "Show a form"\
    Home_Menu "Show files in \$HOME for selection"\
    File_Menu "Word-menue in \$HOME for selection"\
    Show "Show file test.txt"\
    Tail "Watch /var/log/messages"\
    Version "Show program version info"\
    Quit "Exit demo program"  2>$_temp


    opt=${?}
    if [ $opt != 0 ]; then rm $_temp; exit; fi
    menuitem=`cat $_temp`
    echo "menu=$menuitem"
    case $menuitem in
     Micro) run_test ;;
     Config) vim $CONFIG;;
        Multi) checklist;;
        Show) textbox;;
        Tail) tailbox;;
        Driver) driverlist;;
        Gauge) gauge;;
        File) file_select;;
        Home_Menu) file_menu;;
        Word_Menu) word_menu;;
        Input) inputbox;;
        Radio) radiolist;;
        Form) formbox;;
        Version) version;;
        Quit) rm $_temp; exit;;
        esac

}

while true; do
  main_menu
done
