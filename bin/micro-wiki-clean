#!/usr/bin/perl -X
use strict;
use warnings;
use JSON::XS;
use Data::Printer;
use AI::MicroStructure;
use AI::MicroStructure::Util;
#use AI::MicroStructure::Fitnes;
#use AI::MicroStructure::Categorizer;
#use AI::MicroStructure::Memorizer;
#use AI::MicroStructure::Tree;
#use AI::MicroStructure::Collection;
use Storable::CouchDB;

my $state = AI::MicroStructure::Util::load_config(); my @CWD=$state->{cwd}; my $config=$state->{cfg};




  sub checkIsThere {

    my $key =shift;


    require LWP::UserAgent;
    my $ua = LWP::UserAgent->new;
    my ($server,$db) = ($config->{couchdb},$config->{db});

   my $res ;

    $res = $ua->get(sprintf('%s/%s/_design/base/_view/instances?reduce=false&start_key=["%s"]&end_key=["%sz"]',
                              $server,
                              $db,
                              $key,
                              $key));


$res = decode_json($res->content);
return @{$res->{rows}};


}


   our $x = Storable::CouchDB->new(
                                      uri => $config->{couchdb},  #default
                                      db  => $config->{db}
                                     );


my @bigwikimedia = ();
push @bigwikimedia,$_ for qw(song band music musician album rapper singer songwritter
       entertainer magazin film tv_series david_bowie_song lyricist cristina_aguilera_song
       film single movie rapstar actor rock pop band sport journal magazine sportscaster band newspaper writer music basketball novel film song artist cartoonist tv_series author dj tv_channel novelist band finnish_band journalist rapper music);


sub deleteByCategory  {
my $cat = shift;
my @q=();
my @set = checkIsThere($cat);
print "\n", map{  push @q,$_->{id} unless(!$_->{id});}@set;
print join "\n",@q;
map{ $x->delete($_) && print $_."\n"; }@q;
}


deleteByCategory($_) for(@bigwikimedia);


  1;

  __END__
