#!/usr/bin/perl
  use strict;
  use warnings;
  use Data::Printer;
  use Parse::RecDescent;
  use Getopt::Long;
  use Statistics::Basic qw(:all);
  use LWP::UserAgent;
  use File::Spec;
  use JSON::XS;
  use File::Path;
  use PerlIO::gzip;
  use YAML qw<DumpFile LoadFile>;
  use Parallel::Iterator qw( iterate );
  use AnyEvent::Subprocess::Easy qw(qx_nonblock);
  use AI::Classifier::Text::Analyzer;
  use AI::MicroStructure;

  my $pid = $$;

  use constant WORDS     =>  '/home/santex/data-hub/book/output-unique';
  use constant MAIL_RC   =>  'http://quantup.com/concept-knowledge/science/0.001-brain.txt.gz';
  use constant OUTPUT    =>  'conceptor';
  use constant AUTHOR    => 'http://localhost/~';
  use constant USER_BASE => 'http://localhost//training-knowledge/science';
  use constant STATE     =>  File::Spec->catfile(OUTPUT,'work.yml');
  use constant DATA      =>  File::Spec->catfile(OUTPUT,'data.html');
  use constant QUERYS    =>  File::Spec->catfile(OUTPUT,'querys.html');
  use constant SIZE      =>  80;

  mkpath( OUTPUT );

  my  $currents = -f STATE ? LoadFile( STATE ) : {};
  my ($date, $analyzer , $micro ,$sub, $UPDATE, $ua ,$sx,$cmd);

  GetOptions( 'update' => \$UPDATE )
   or die "$1 [--update]\n";

  $UPDATE        = 0;
  $analyzer = AI::Classifier::Text::Analyzer->new();
  $ua       = LWP::UserAgent->new;
  $micro    = AI::MicroStructure->new();


  mkpath( OUTPUT );

  $currents = -f STATE ? LoadFile( STATE ) : {};


  $SIG{INT} = sub {
    print "Got SIGINT, stopping\n";
    exit;
  };


my @DATA = <DATA>;

  my ( %currents,   $id ) = ();
  foreach my $call (@DATA){

  next unless($call);

  $date = qx_nonblock($call)->recv;

    foreach my $line(split(/\n/,$date)){
        next unless($line);

      $sx=sx(split(/=/,$line));
      $sub->{$call}->{$sx}->{line}=$line;
          $sub->{$call}->{$sx}->{concept}=[split(/=/,$line)];
          $sub->{$call}->{$sx}->{concept}=$sub->{$call}->{$sx}->{concept}[0];
          $sub->{$call}->{$sx}->{features}=$analyzer->analyze($line);

      $sub->{$call}->{$sx}->{avg}=[values %{$sub->{$call}->{$sx}->{features}}];
      $sub->{$call}->{$sx}->{avg}=sprintf mean($sub->{$call}->{$sx}->{avg});

    }




  }


END {
    print "Saving ", STATE, "\n";
    DumpFile( STATE, $cmd ,[values %$sub]);


 my $index = File::Spec->catfile( OUTPUT, 'data.html' );
  open my $ih, '>', $index or die "Can't write $index ($!)\n";
    print $ih  JSON::XS->new->pretty(1)->encode({data=>$sub});
    close $ih;

  $index = File::Spec->catfile( OUTPUT, 'querys.html' );
  open  $ih, '>', $index or die "Can't write $index ($!)\n";
    print $ih  JSON::XS->new->pretty(1)->encode({data=>$cmd});
    close $ih;


}

update(
  $currents,
  $UPDATE
  ? sub {
    my ( $currents, $id ) = @_;
    return 0;
   }
  : sub {
    my ( $currents, $id ) = @_;
    return exists $currents->{$id}
     && $currents->{$id}->{state} eq 'done';
  }
);
sub sx {
  my ( @res ) = @_;
  my ($i, $t, $_);
  for ( @res ) { tr/a-zA-Z//cd; tr/a-zA-Z/A-ZA-Z/s;
      ($i,$t) = /(.)(.*)/;
     $t =~ tr/BFPVCGJKQSXZDTLMNRAEHIOUWY/111122222222334556/sd;
     $_ = substr(($i||'Z').$t.'000', 0, 4 );
  }
  wantarray ? @res : $res[0];
}

sub build_head {
  my $currents = shift;
  return $currents;
}

sub update {
  my ( $currents, $skip_if ) = @_;
  print "Getting ", MAIL_RC, "\n";
  my $authors = get_authors( MAIL_RC );
  open my $ah, '<:gzip', $authors or die "Can't read $authors ($!)\n";

  my $iter = iterate(
    { workers => 20 },
    sub {
      my ( $id, undef ) = @_;
      print "Checking $id\n";
      return save_current( lc( $id ) );
    },
    sub {
      while ( defined( my $line = <$ah> ) ) {
        next unless $line =~ /^alias\s+(\S+)/;
        return $1;
      }
      return;
    }
  );

  while ( my ( $id, $current ) = $iter->() ) {
    $currents->{$id} = $current;
    print "Icon saved as ", $current->{name}, "\n"
     if $current && $current->{name};
  }
}

sub build_page {
  my $currents = shift;
  return $currents;
}
sub get_authors {
  my $url  = shift;
  my $resp = $ua->get( $url );
  if ( $resp->is_success ) {
    my $name = File::Spec->catfile( OUTPUT, '01mailrc.txt.gz' );
    open my $ah, '>', $name or die "Can't write $name ($!)\n";
    binmode $ah;
    print $ah $resp->content;
    close $ah;
    return $name;
  }
  else {
    die $resp->status_line;
  }
}

sub user_home {
  my $id = shift;
  return AUTHOR . lc( $id );
}

sub save_current {
  my $id = shift;
  my %ext_map = ( jpeg => 'jpg' );
  my ( $data, $type ) = eval { get_current( $id ) };

  if ( $@ ) {
    return {
      error => $@,
      state => 'error'
    };
  }

# if ( $data && $data ne $default_image && $type =~ m{ ^image/(\S+) }x ) {
  if ( $data ) {
    my $ext = $ext_map{$1} || $1;
    my $name = make_name( $id, $ext );
    return {
      name  => $name,
      state => 'done'
    };
  }

  return { state => 'done' };
}

sub make_name {
  my ( $email, $ext ) = @_;
  my %enc = (
    '@' => '-AT-',
    '.' => '-DOT-'
  );
  $email =~ s/([@.])/$enc{$1}||$1/eg;
  return File::Spec->catfile( OUTPUT, "$email.$ext" );
}

sub get_current {
  my $id = shift;
  $id =~ s{^(((.).).*)$}{$3/$2/$1};
  TRY: for my $ext ( qw( jpg png ) ) {
    my $url  = USER_BASE . '/' . $id . '.' . $ext;
    my $resp = $ua->get( $url );
    if ( $resp->is_success ) {
      return ( $resp->content, $resp->header( 'Content-Type' ) );
    }
    elsif ( $resp->code == 404 ) {
      next TRY;
    }
    else {
      die join ' ', $resp->code, $resp->message;
    }
  }
  return;
}

#comma,separated=>values
#with,q{a,perl,twist},/to them/
#latst,query=>mech-dump --text http://www.latest-ufo-sightings.net/p/polls.html  |  tr "P|." "\n" | tr -d "("   | tr  ")" "\n" | egrep "^[1-31]|oll"
#all,query=>for url in $(mech-dump --links http://www.latest-ufo-sightings.net  | egrep -i "archive"); do echo $url; done

__DATA__
for o in `cat /home/santex/data-hub/book/output-unique | egrep "^*.(alg|qua|sozio|therm|exo|geo|bio|phys|chem).*"`; do qq=$(wordnet $o  -grepn | egrep -v "of noun");  echo -split-hit $qq ;  done
mech-dump --text http://www.latest-ufo-sightings.net/p/polls.html  |  tr "P|." "\n" | tr -d "("   | tr  ")" "\n" | egrep "^[1-31]|oll"
for url in $(mech-dump --links http://www.latest-ufo-sightings.net  | egrep -i "archive"); do echo $url; done
